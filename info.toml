# INTRO

[[exercises]]
name = "intro1"
path = "exercises/intro/intro1.cairo"
mode = "compile"
hint = """"""

[[exercises]]
name = "intro2"
path = "exercises/intro/intro2.cairo"
mode = "compile"
hint = """"""

[[exercises]]
name = "intro3"
path = "exercises/intro/intro3.cairo"
mode = "compile"
hint = """"""

[[exercises]]
name = "intro4"
path = "exercises/intro/intro4.cairo"
mode = "compile"
hint = """"""

# VARIABLES

[[exercises]]
name = "variables1"
path = "exercises/variables/variables1.cairo"
mode = "compile"
hint = """
The declaration on line 8 is missing a keyword that is needed in Cairo
to create a new variable binding."""

[[exercises]]
name = "variables2"
path = "exercises/variables/variables2.cairo"
mode = "compile"
hint = """
What happens if you annotate line 7 with a type annotation?
What if you give x a value?
What if you do both?
What type should x be, anyway? (remember what the basic type in Cairo is?)
What if x is the same type as 10? What if it's a different type? (e.g. a u8)"""

[[exercises]]
name = "variables3"
path = "exercises/variables/variables3.cairo"
mode = "compile"
hint = """
Oops! In this exercise, we have a variable binding that we've created on
line 7, and we're trying to use it on line 8, but we haven't given it a
value. We can't print out something that isn't there; try giving x a value!
This is an error that can cause bugs that's very easy to make in any
programming language -- thankfully the Cairo compiler has caught this for us!"""

[[exercises]]
name = "variables4"
path = "exercises/variables/variables4.cairo"
mode = "compile"
hint = """
In Cairo, variable bindings are immutable by default. But here we're trying
to reassign a different value to x! There's a keyword we can use to make
a variable binding mutable instead."""

[[exercises]]
name = "variables5"
path = "exercises/variables/variables5.cairo"
mode = "compile"
hint = """
In variables4 we already learned how to make an immutable variable mutable
using a special keyword. Unfortunately this doesn't help us much in this exercise
because we want to assign a different typed value to an existing variable. Sometimes
you may also like to reuse existing variable names because you are just converting
values to different types like in this exercise.
Fortunately Cairo has a powerful solution to this problem: 'Shadowing'!
You can see an example of variables and 'shadowing' here: https://link.medium.com/c8TqX7R3qxb#4fe8
You can read about the different integer types here: https://link.medium.com/c8TqX7R3qxb#6d64
If you want to learn more about this concept, you can also read about it in the Rust Book:
https://doc.rust-lang.org/book/ch03-01-variables-and-mutability.html#shadowing
Try to solve this exercise afterwards using this technique."""

[[exercises]]
name = "variables6"
path = "exercises/variables/variables6.cairo"
mode = "compile"
hint = """
We know about variables and mutability, but there is another important type of
variable available: constants.
Constants are always immutable and they are declared with keyword 'const' rather
than keyword 'let'.
Constants types must also always be annotated.
You can read about the different integer types here: https://link.medium.com/c8TqX7R3qxb#6d64
"""


# STRUCTS

[[exercises]]
name = "structs1"
path = "exercises/structs/structs1.cairo"
mode = "test"
hint = """
Cairo has a single type of struct that are named collections of related data stored in fields.
In this exercise you need to complete and implement a struct.
Here is how we describe a person struct that stores a name and an age,

#[derive(Copy, Drop)]
struct Person {
    name: felt,
    age: felt,
}

You'd use the struct like so,

let john = Person { name: 'John', age: 29 };


Read more about structs in the Structs section of this article: https://link.medium.com/c8TqX7R3qxb#ff54 """


[[exercises]]
name = "structs2"
path = "exercises/structs/structs2.cairo"
mode = "test"
hint = """
Creating instances of structs is easy, all you need to do is assign some values to its fields. Unlike Rust, Cairo requires you to initialize all fields when creating a struct and 
there is no update syntax available at the moment. You can have multiple data types in a struct, and even other structs.

There are some shortcuts that can be taken when destructuring structs by using the following syntax: `let Foo {x: a, y: b} = foo`;
Read more about structs in the Structs section of this article: https://link.medium.com/c8TqX7R3qxb#ff54 """

[[exercises]]
name = "structs3"
path = "exercises/structs/structs3.cairo"
mode = "test"
hint = """
For is_international: What makes a package international? Seems related to the places it goes through right?

For get_fees: This method takes an additional argument, is there a field in the Package struct that this relates to?

Looking at the test functions will also help you understand more about the syntax.
This section will help you understanding more about impls and traits: https://link.medium.com/c8TqX7R3qxb#83b5.
=======
"""